# Record en Transcribe App

## 1. Projectoverzicht
Een Python- en webapplicatie waarmee gebruikers gesprekken kunnen opnemen via een microfoon en deze kunnen omzetten naar geschreven tekst (transcriptie). De applicatie biedt een web-GUI waarin de gebruiker een microfoon kan selecteren, opnames kan starten en stoppen, en vervolgens kan kiezen of de opname direct getranscribeerd moet worden. Daarnaast kunnen gebruikers ook bestaande audiobestanden uploaden en laten transcriberen in verschillende formaten.

## 2. Architectuur
De applicatie is opgebouwd uit de volgende modules:
- Web interface (Flask)
- Audio opname module
- Audio upload en verwerking module
- Transcriptie module
- Bestandsbeheer module

## 3. Modules

### app.py
- **Functionaliteit**: Hoofdbestand dat de applicatie start en initialiseert
- **Belangrijkste functies**:
  - `configure_logging(app)`: Configureert de logging voor de applicatie
    - Parameters: app (Flask app instance)
    - Return: Void
    - Afhankelijkheden: logging, os
  - `main()`: Start de Flask webserver en initialiseert de benodigde modules
    - Parameters: Geen
    - Return: Void
    - Afhankelijkheden: Alle andere modules
  - `create_app()`: CreÃ«ert en configureert de Flask applicatie
    - Parameters: Geen
    - Return: Flask applicatie-instantie
    - Afhankelijkheden: Flask, web_interface module

### modules/web_interface.py
- **Functionaliteit**: Verzorgt de web-GUI en API-endpoints
- **Belangrijkste functies**:
  - `init_app(app)`: Initialiseert de Flask routes en API endpoints
    - Parameters: app (Flask app instance)
    - Return: Void
    - Afhankelijkheden: Flask
  - `get_devices()`: API endpoint om beschikbare audio-apparaten op te halen
    - Parameters: Geen
    - Return: JSON response met lijst van apparaten
    - Afhankelijkheden: recorder.py
  - `api_start_recording()`: API endpoint om een opname te starten
    - Parameters: device_id (via JSON request)
    - Return: JSON response met status
    - Afhankelijkheden: recorder.py
  - `api_stop_recording()`: API endpoint om een opname te stoppen
    - Parameters: Geen
    - Return: JSON response met status en bestandspad
    - Afhankelijkheden: recorder.py, file_handler.py
  - `api_transcribe()`: API endpoint om een audio bestand te transcriberen
    - Parameters: audio_file (via JSON request), language (optioneel)
    - Return: JSON response met transcriptie tekst en bestandspad
    - Afhankelijkheden: transcriber.py, file_handler.py
  - `api_languages()`: API endpoint om ondersteunde talen op te halen
    - Parameters: Geen
    - Return: JSON response met ondersteunde talen
    - Afhankelijkheden: transcriber.py
  - `api_upload_audio()`: API endpoint om audiobestanden te uploaden
    - Parameters: audio_file (via multipart form data)
    - Return: JSON response met uploadstatus en bestandspad
    - Afhankelijkheden: file_handler.py
  - `api_audio_formats()`: API endpoint om ondersteunde audioformaten op te halen
    - Parameters: Geen
    - Return: JSON response met ondersteunde formaten en maximale bestandsgrootte
    - Afhankelijkheden: file_handler.py, transcriber.py

### modules/recorder.py
- **Functionaliteit**: Verzorgt het opnemen van audio via de microfoon
- **Belangrijkste functies**:
  - `list_audio_devices()`: Geeft een lijst van beschikbare audio input-apparaten
    - Parameters: Geen
    - Return: List (lijst met beschikbare audioapparaten)
    - Afhankelijkheden: PyAudio
  - `start_recording(device_id)`: Start een opname met het gekozen apparaat
    - Parameters: device_id (int, ID van het gekozen audioapparaat)
    - Return: Bool (True als het starten is gelukt)
    - Afhankelijkheden: PyAudio
  - `stop_recording()`: Stopt de huidige opname
    - Parameters: Geen
    - Return: Bytes (audio data in bytes)
    - Afhankelijkheden: PyAudio
  - `save_recording(audio_data, filename)`: Slaat de opname op als een audiobestand
    - Parameters: audio_data (bytes), filename (str)
    - Return: str (pad naar het opgeslagen bestand)
    - Afhankelijkheden: file_handler.py

### modules/transcriber.py
- **Functionaliteit**: Verzorgt de transcriptie van audiobestanden naar tekst
- **Belangrijkste functies**:
  - `transcribe_audio(audio_file, language)`: Transcribeert een audiobestand naar tekst
    - Parameters: audio_file (str, pad naar het audiobestand), language (str, optioneel)
    - Return: str (getranscribeerde tekst)
    - Afhankelijkheden: SpeechRecognition, file_handler.py
  - `transcribe_with_options(audio_file, options)`: Transcribeert met uitgebreide opties
    - Parameters: audio_file (str), options (dict, optioneel)
    - Return: dict (transcriptieresultaten en metadata)
    - Afhankelijkheden: SpeechRecognition, file_handler.py
  - `save_transcription(text, filename)`: Slaat de transcriptie op als een tekstbestand
    - Parameters: text (str), filename (str)
    - Return: str (pad naar het opgeslagen bestand)
    - Afhankelijkheden: file_handler.py
  - `supported_languages()`: Geeft een lijst van ondersteunde talen
    - Parameters: Geen
    - Return: dict (taalcodes en -namen)
    - Afhankelijkheden: Geen
  - `get_supported_audio_formats()`: Geeft een lijst van ondersteunde audioformaten
    - Parameters: Geen
    - Return: List (ondersteunde bestandsextensies)
    - Afhankelijkheden: file_handler.py

### modules/file_handler.py
- **Functionaliteit**: Verzorgt het bestandsbeheer voor opnames en transcripties
- **Belangrijkste functies**:
  - `get_download_folder()`: Bepaalt de standaard download-map
    - Parameters: Geen
    - Return: str (pad naar de download-map)
    - Afhankelijkheden: Geen
  - `save_file(data, filename, folder)`: Slaat data op als een bestand
    - Parameters: data (bytes of str), filename (str), folder (str, optioneel)
    - Return: str (volledig pad naar het opgeslagen bestand)
    - Afhankelijkheden: Geen
  - `load_file(filepath)`: Laadt een bestand van schijf
    - Parameters: filepath (str)
    - Return: bytes of str (inhoud van het bestand)
    - Afhankelijkheden: Geen
  - `validate_audio_file(file, filename)`: Valideert of een bestand een geldig audiobestand is
    - Parameters: file (str of bytes), filename (str)
    - Return: tuple (is_valid, error_message)
    - Afhankelijkheden: Geen
  - `convert_audio_to_wav(input_file)`: Converteert een audiobestand naar WAV-formaat
    - Parameters: input_file (str)
    - Return: str (pad naar het geconverteerde WAV-bestand)
    - Afhankelijkheden: pydub
  - `get_supported_audio_info()`: Geeft informatie over ondersteunde audioformaten
    - Parameters: Geen
    - Return: dict (ondersteunde extensies, MIME-types en maximale grootte)
    - Afhankelijkheden: Geen

## 4. Status
- **Voltooid**:
  - Basis projectstructuur (Issue #1)
  - HTML/CSS/JavaScript frontend basis
  - Flask applicatie setup
  - Recorder module (Issue #2)
  - File handler module
  - Transcriber module (Issue #3)
  - Integratie tests en bugfixes (Issue #4)
  - UI/UX verbeteringen (Issue #6)
  - Upload functionaliteit voor bestaande audiobestanden (Issue #7)
  
- **Nog te implementeren**:
  - Uitgebreide taalopties voor transcriptie
  - Configuratiescherm voor gebruikersinstellingen
  - Bewerkmogelijkheden voor transcripties

## 5. Volgende stappen
1. Uitbreiden van meertalenondersteuning voor transcriptie
2. Toevoegen van configuratiescherm voor gebruikersinstellingen
3. Implementeren van bewerkmogelijkheden voor transcripties
4. Ondersteuning voor bestandsformaat conversie
5. Toevoegen van een zoekfunctie voor transcripties